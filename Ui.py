# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\test.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5 import QtGui
from PyQt5.QtWidgets import *
from PyQt5.QtGui import QPixmap
import sys
import cv2
from PyQt5.QtCore import pyqtSignal, pyqtSlot, Qt, QThread
import numpy as np
import handDetect
import gtts  
import os
from playsound import playsound 

class VideoThread(QThread):
    change_pixmap_signal1 = pyqtSignal(np.ndarray)
    change_pixmap_signal2 = pyqtSignal(np.ndarray)

    def __init__(self,tl1,tl2):
        super().__init__()
        self._run_flag = True
        self.tl1=tl1
        self.tl2=tl2

    def run(self):
        while self._run_flag:
            handDetect.fun(self.change_pixmap_signal1,self.change_pixmap_signal2,self._run_flag,self.tl1,self.tl2)

    def stop(self):
        """Sets run flag to False and waits for thread to finish"""
        self._run_flag = False
        self.wait()


class Ui_MainWindow(QWidget):
        
    
    def __init__(self):
        super().__init__()
        self.setObjectName("self")
        self.setWindowTitle("Hand Gesture Recognition")
        self.resize(1034, 738)
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.setFont(font)
        self.centralwidget = QtWidgets.QWidget(self)
        self.centralwidget.setObjectName("centralwidget")

        self.image_label1 = QtWidgets.QLabel(self.centralwidget)
        self.image_label1.setGeometry(QtCore.QRect(10, 10, 571, 371))
        self.image_label1.setObjectName("image_label1")

        self.image_label2 = QtWidgets.QLabel(self.centralwidget)
        self.image_label2.setGeometry(QtCore.QRect(620, 10, 351, 381))
        self.image_label2.setObjectName("image_label2")

        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(170, 440, 151, 51))
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setTextFormat(QtCore.Qt.AutoText)
        self.label.setObjectName("label")
        self.label.setText("Predicted:")

        self.text_label1 = QtWidgets.QLabel(self.centralwidget)
        self.text_label1.setGeometry(QtCore.QRect(220, 500, 151, 51))
        self.text_label1.setObjectName("text_label1")

        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(720, 440, 151, 51))
        self.label_2.setText("Sentence:")

        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)

        self.label_2.setFont(font)
        self.label_2.setTextFormat(QtCore.Qt.AutoText)
        self.label_2.setObjectName("label_2")

        self.text_label2 = QtWidgets.QLabel(self.centralwidget)
        self.text_label2.setGeometry(QtCore.QRect(760, 500, 151, 51))
        self.text_label2.setObjectName("text_label2")

        self.pushButton1 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton1.setGeometry(QtCore.QRect(350, 600, 151, 41))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.pushButton1.setFont(font)
        self.pushButton1.setStyleSheet("color:rgb(85, 85, 255)")
        self.pushButton1.setObjectName("pushButton")
        self.pushButton1.setText("Clear")
        self.pushButton1.clicked.connect(self.clearButtonCliked)
        # self.setCentralWidget(self.centralwidget)
        # self.menubar = QtWidgets.QMenuBar(self)
        self.pushButton2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton2.setGeometry(QtCore.QRect(550, 600, 151, 41))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.pushButton2.setFont(font)
        self.pushButton2.setStyleSheet("color:rgb(85, 85, 255)")
        self.pushButton2.setObjectName("pushButton")
        self.pushButton2.setText("Speak")
        self.pushButton2.clicked.connect(self.speechButtonCliked)
        # self.menubar.setGeometry(QtCore.QRect(0, 0, 1034, 43))
        # self.menubar.setObjectName("menubar")
        #self.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(self)
        self.statusbar.setObjectName("statusbar")
        # self.setStatusBar(self.statusbar)

        self.pushButton3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton3.setGeometry(QtCore.QRect(730, 400, 120, 41))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.pushButton3.setFont(font)
        self.pushButton3.setStyleSheet("color:rgb(85, 85, 255)")
        self.pushButton3.setObjectName("pushButton")
        self.pushButton3.setText("<-")
        self.pushButton3.clicked.connect(self.clearOnceButtonCliked)

        self.thread1 = VideoThread(self.text_label1,self.text_label2)
        self.thread1.change_pixmap_signal1.connect(self.update_image1)
        self.thread1.change_pixmap_signal2.connect(self.update_image2)
        self.thread1.start()
        QtCore.QMetaObject.connectSlotsByName(self)
    
    def closeEvent(self, event):
        self.thread1.stop()
        event.accept()
        self.close()
        exit()
    
    def clearButtonCliked(self,event):
        self.text_label2.clear()
    
    def clearOnceButtonCliked(self,event):
        word=self.text_label2.text()
        self.text_label2.setText(word[:-1])
    
    def speechButtonCliked(self,event):
        t1 = gtts.gTTS(self.text_label2.text())
        t1.save("temp\\welcome.mp3") 
        try: 
            playsound("temp\\welcome.mp3")
            os.remove("temp\\welcome.mp3")
        except:
            pass

    @pyqtSlot(np.ndarray)
    def update_image1(self, cv_img):
        """Updates the image_label with a new opencv image"""
        qt_img = self.convert_cv_qt(cv_img,571,371)
        self.image_label1.setPixmap(qt_img)

    def update_image2(self, cv_img):
        """Updates the image_label with a new opencv image"""
        qt_img = self.convert_cv_qt(cv_img,351,381)
        self.image_label2.setPixmap(qt_img)
    
    def convert_cv_qt(self, cv_img,disply_width,display_height):
        """Convert from an opencv image to QPixmap"""
        rgb_image = cv2.cvtColor(cv_img, cv2.COLOR_BGR2RGB)
        h, w, ch = rgb_image.shape
        bytes_per_line = ch * w
        convert_to_Qt_format = QtGui.QImage(rgb_image.data, w, h, bytes_per_line, QtGui.QImage.Format_RGB888)
        p = convert_to_Qt_format.scaled(disply_width, display_height, Qt.KeepAspectRatio)
        return QPixmap.fromImage(p)


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    ui = Ui_MainWindow()
    ui.show()
    sys.exit(app.exec_())
